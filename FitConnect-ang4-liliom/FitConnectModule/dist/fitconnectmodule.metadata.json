{"__symbolic":"module","version":3,"metadata":{"createTranslateLoader":{"__symbolic":"function","parameters":["http"],"value":{"__symbolic":"new","expression":{"__symbolic":"reference","module":"ng2-translate","name":"TranslateStaticLoader"},"arguments":[{"__symbolic":"reference","name":"http"},"./assets/i18n",".json"]}},"FitConnectModule":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"NgModule"},"arguments":[{"imports":[{"__symbolic":"reference","module":"@angular/common","name":"CommonModule"},{"__symbolic":"reference","module":"@angular/forms","name":"FormsModule"},{"__symbolic":"reference","module":"@angular/forms","name":"ReactiveFormsModule"},{"__symbolic":"reference","module":"@angular/platform-browser/animations","name":"BrowserAnimationsModule"},{"__symbolic":"reference","module":"@angular/material","name":"MaterialModule"},{"__symbolic":"reference","module":"@angular/flex-layout","name":"FlexLayoutModule"},{"__symbolic":"reference","module":"ng2-validation/dist","name":"CustomFormsModule"},{"__symbolic":"reference","module":"@angular/forms","name":"FormsModule"},{"__symbolic":"reference","module":"angular2-text-mask","name":"TextMaskModule"},{"__symbolic":"reference","module":"@angular/http","name":"HttpModule"},{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"ng2-translate","name":"TranslateModule"},"member":"forRoot"},"arguments":[{"provide":{"__symbolic":"reference","module":"ng2-translate","name":"TranslateLoader"},"useFactory":{"__symbolic":"reference","name":"createTranslateLoader"},"deps":[{"__symbolic":"reference","module":"@angular/http","name":"Http"}]}]}],"declarations":[{"__symbolic":"reference","name":"FitDialogComponent"},{"__symbolic":"reference","name":"FitMediatorComponent"}],"exports":[{"__symbolic":"reference","name":"FitDialogComponent"},{"__symbolic":"reference","name":"FitMediatorComponent"}],"providers":[],"entryComponents":[{"__symbolic":"reference","name":"FitDialogComponent"}]}]}],"members":{},"statics":{"forRoot":{"__symbolic":"function","parameters":[],"value":{"ngModule":{"__symbolic":"reference","name":"FitConnectModule"},"providers":[{"__symbolic":"reference","name":"FitMediatorComponent"},{"__symbolic":"reference","name":"FitDialogComponent"},{"__symbolic":"reference","name":"Éµa"},{"__symbolic":"reference","name":"MetaformaService"}]}}}},"FitMediatorComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"fit-mediator","template":"<md-card id=\"mediator\"> <md-sidenav-container (click)=\"showFitDialog()\" class=\"z-depth-5\"> <md-sidenav mode=\"side\" #mediatorSidenav class=\"md-sidenav-right\" fxLayoutAlign=\"center center\" md-disable-backdrop> <div> {{notificationMsg}} </div> </md-sidenav> <button md-fab class=\"md-fab md-primary pull-right md-raised\">fit</button> </md-sidenav-container> </md-card>","styles":["#mediator { z-index: 100; padding: 30px; background-color: transparent; position: fixed; bottom: 0px; right: 0px; box-shadow: none; } #mediator .z-depth-1 { box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2); } #mediator .z-depth-2 { box-shadow: 0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12), 0 2px 4px -1px rgba(0, 0, 0, 0.3); } #mediator .z-depth-3 { box-shadow: 0 6px 10px 0 rgba(0, 0, 0, 0.14), 0 1px 18px 0 rgba(0, 0, 0, 0.12), 0 3px 5px -1px rgba(0, 0, 0, 0.3); } #mediator .z-depth-4 { box-shadow: 0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 2px rgba(0, 0, 0, 0.12), 0 5px 5px -3px rgba(0, 0, 0, 0.3); } #mediator .z-depth-5 { box-shadow: 0 16px 24px 2px rgba(0, 0, 0, 0.14), 0 6px 30px 5px rgba(0, 0, 0, 0.12), 0 8px 10px -5px rgba(0, 0, 0, 0.3); } #mediator md-sidenav-container { background-color: transparent; border-radius: 26px; } #mediator md-sidenav-container md-sidenav { width: 250px; border-radius: 26px; background-color: transparent; } #mediator md-sidenav-container md-sidenav div { padding: 10px; font-size: 12px; } #mediator md-sidenav-container .mat-sidenav-content { overflow: visible; } #mediator md-sidenav-container button { z-index: 100; } "],"encapsulation":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewEncapsulation"},"member":"None"}}]}],"members":{"mediatorSidenav":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["mediatorSidenav"]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/material","name":"MdDialog"}]}],"showFitDialog":[{"__symbolic":"method"}],"notify":[{"__symbolic":"method"}]}},"FitDialogComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"fit-dialog","template":"<div id=\"dialog\" fxLayout=\"column\" fxLayoutAlign=\"none center\"> <md-toolbar class=\"transparent\" fxLayout=\"row\" fxLayoutAlign=\"start center\"> <div> <button [disabled]=\"selectedTab <= 1\" fxFlex=\"30px\" class=\"no-padding\" md-button type=\"button\" (click)=\"goBack()\"> <i class=\"material-icons\">navigate_before</i> </button> </div> <div> <button [disabled]=\"selectedTab == 0\" fxFlex=\"30px\" class=\"no-padding\" md-button type=\"button\" (click)=\"goTo(0)\"> <i class=\"material-icons\">view_module</i> </button> </div> <div> <button (click)=\"changeLanguage()\" fxFlex=\"30px\" class=\"no-padding\" md-button type=\"button\"> {{getOtherLanguage()}} </button> </div> <!-- <div> <md-slide-toggle (change)=\"changeUnits()\">imperial</md-slide-toggle> </div> --> <div fxFlex=\"94\"  fxLayoutAlign=\"end none\"> <button fxFlex=\"30px\" class=\"no-padding\" md-button type=\"button\" (click)=\"closeDialogBox()\"> <i class=\"material-icons\">close</i> </button> </div> </md-toolbar> <div> <md-tab-group [(selectedIndex)]=\"selectedTab\"> <md-tab label=\"Menu\"> <ng-container *ngTemplateOutlet=\"menuTab\"></ng-container> </md-tab> <md-tab label=\"Start\"> <ng-container *ngTemplateOutlet=\"startTab\"></ng-container> </md-tab> <md-tab label=\"Sex\"> <ng-container *ngTemplateOutlet=\"sexTab\"></ng-container> </md-tab> <md-tab label=\"basicInfo\"> <ng-container *ngTemplateOutlet=\"basicInfosTab\"></ng-container> </md-tab> <md-tab label=\"Shape\"> <ng-container *ngTemplateOutlet=\"bodyShapesTab\"></ng-container> </md-tab> <md-tab label=\"Measurements\"> <ng-container *ngTemplateOutlet=\"measurementsTab\"></ng-container> </md-tab> <md-tab label=\"End\"> <ng-container *ngTemplateOutlet=\"endTab\"></ng-container> </md-tab> </md-tab-group> </div> </div> <ng-template #menuTab> <md-card fxLayout=\"column\" fxLayoutAlign=\"center none\"> <h1>Menu</h1> <div fxLayout=\"row\" fxLayoutAlign=\"space-around center\"> <div> <button md-button (click)=\"goTo(2)\">sex</button> </div> <div> <button md-button (click)=\"goTo(3)\">basicInfos</button> </div> <div> <button md-button (click)=\"goTo(4)\">shape</button> </div> <div> <button md-button (click)=\"goTo(5)\">measurements</button> </div> </div> </md-card> </ng-template> <ng-template #startTab> <md-card fxLayout=\"column\" fxLayoutAlign=\"center none\"> <h1>{{'HOME.START' | translate}}</h1> <div fxLayout=\"row\" fxLayoutAlign=\"space-around center\"> <div fxFlex=\"90\"> <p>{{'HOME.FIRST' | translate}}</p> <p>{{'HOME.SECOND' | translate}}</p> </div> <ng-container *ngTemplateOutlet=\"nextButton\"></ng-container> </div> </md-card> </ng-template> <ng-template #sexTab> <md-card fxLayout=\"column\" fxLayoutAlign=\"center none\"> <h1>{{'SEX.QUESTION' | translate}}</h1> <div fxLayout=\"row\"> <div fxLayout=\"row\" fxAlign=\"center center\" class=\"btn-sex-div\"> <button md-button type=\"button\" (click)=\"setSex('h')\">{{'SEX.MEN' | translate}}</button> </div> <div fxLayout=\"row\" fxAlign=\"center center\" class=\"btn-sex-div\"> <button md-button type=\"button\" (click)=\"setSex('f')\">{{'SEX.WOMEN' | translate}}</button> </div> </div> </md-card> </ng-template> <ng-template #basicInfosTab> <md-card fxLayout=\"column\" fxLayoutAlign=\"center none\"> <h1>{{'INFO.ENTER' | translate}}</h1> <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\"> <form fxFlex=\"80\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\" [formGroup]=\"basicInfosForm\"> <div fxFlex=\"26\" *ngFor=\"let basicInfo of basicInfos\"> <md-icon [svgIcon]=\"basicInfo.svgIcon\"></md-icon> <div *ngIf=\"metricUnit; else imperialBlock;\">  <div *ngIf=\"basicInfo.name == 'age';\"> <md-input-container> <input mdInput [min]=\"basicInfo.min\" [max]=\"basicInfo.max\" [formControlName]=\"basicInfo.name\" [placeholder]=\"getInputPlacerholder(basicInfosForm, basicInfo)\" [(ngModel)]=\"basicInfo.value\" type=\"number\" required> </md-input-container> </div> <div *ngIf=\"basicInfo.imperialUnit == 'ft';\"> <md-input-container> <input mdInput [min]=\"basicInfo.min\" [max]=\"basicInfo.max\" [formControlName]=\"basicInfo.name\" [placeholder]=\"getInputPlacerholder(basicInfosForm, basicInfo)\" [(ngModel)]=\"basicInfo.value\" type=\"number\" required> <span mdSuffix>cm</span> </md-input-container> </div> <div *ngIf=\"basicInfo.imperialUnit == 'lbs';\"> <md-input-container> <input mdInput [min]=\"basicInfo.min\" [max]=\"basicInfo.max\" [formControlName]=\"basicInfo.name\" [placeholder]=\"getInputPlacerholder(basicInfosForm, basicInfo)\" [(ngModel)]=\"basicInfo.value\" type=\"number\" required> <span mdSuffix>lbs</span> </md-input-container> </div> </div>  <ng-template #imperialBlock> <div *ngIf=\"basicInfo.name == 'age';\"> <md-input-container> <input mdInput [min]=\"basicInfo.min\" [max]=\"basicInfo.max\" [formControlName]=\"basicInfo.name\" [placeholder]=\"getInputPlacerholder(basicInfosForm, basicInfo)\" [(ngModel)]=\"basicInfo.value\" type=\"number\" required> </md-input-container> </div> <div *ngIf=\"basicInfo.imperialUnit == 'ft';\"> <md-input-container> <input mdInput [textMask]=\"{mask: feetMask}\" [min]=\"basicInfo.min\" [max]=\"basicInfo.max\" [formControlName]=\"basicInfo.name\" [placeholder]=\"getInputPlacerholder(basicInfosForm, basicInfo)\" [value]=\"getInImperial(basicInfo.value, basicInfo.imperialUnit)\"  (change)=\"basicInfo.value = setValue($event.target.value, basicInfo.imperialUnit)\" required> </md-input-container> </div> <div *ngIf=\"basicInfo.imperialUnit == 'lbs';\"> <md-input-container> <input mdInput [textMask]=\"{mask: lbsMask}\" [min]=\"basicInfo.min\" [max]=\"basicInfo.max\" [formControlName]=\"basicInfo.name\" [placeholder]=\"getInputPlacerholder(basicInfosForm, basicInfo)\" [value]=\"getInImperial(basicInfo.value, basicInfo.imperialUnit)\"  (change)=\"basicInfo.value = setValue($event.target.value, basicInfo.imperialUnit)\" required> </md-input-container> </div> </ng-template>                      </div> </form> <div fxFlex=\"10\"> <button [disabled]=\"!basicInfosForm.valid\" md-fab type=\"button\" (click)=\"goNext()\"> <i class=\"material-icons\">navigate_next</i> </button> </div> </div> </md-card> </ng-template> <ng-template #bodyShapesTab> <md-card fxLayout=\"column\" fxLayoutAlign=\"center none\"> <h1>{{'BODY.TYPE' | translate}}</h1> <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\"> <div *ngFor=\"let bodyshape of bodyShapeList\"> <button type=\"button\" md-button (click)=\"setShape(bodyshape,$event)\"> <img class=\"full-width\" [src]=\"bodyshape.imgUrl\"> </button> </div> </div> </md-card> </ng-template> <ng-template #measurementsTab> <md-card fxLayout=\"column\" fxLayoutAlign=\"center none\"> <h1>{{'MEASUREMENT.INPUT' | translate}}</h1> <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\"> <div fxFlex=\"80\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\"> <div fxFlex=\"30\"> <img class=\"full-width\" [src]=\"selectedImgUrl\"> </div> <form fxFlex=\"60\" [formGroup]=\"measurementsForm\"> <div *ngFor=\"let measurement of measurements\"> <div *ngIf=\"metricUnit; else imperialBlock;\"> <md-input-container> <input mdInput [min]=\"measurement.min\" [max]=\"measurement.max\" [formControlName]=\"measurement.name\" [placeholder]=\"getInputPlacerholder(measurementsForm, measurement)\" type=\"number\" [(ngModel)]=\"measurement.value\" required> <span mdSuffix>cm</span> </md-input-container> </div> <ng-template #imperialBlock> <md-input-container> <input mdInput [textMask]=\"{mask: inchMask}\" [min]=\"measurement.min\" [max]=\"measurement.max\" [formControlName]=\"measurement.name\" [placeholder]=\"getInputPlacerholder(measurementsForm, measurement)\" [value]=\"getInImperial(measurement.value, measurement.imperialUnit)\"  (change)=\"measurement.value = setValue($event.target.value, measurement.imperialUnit)\" required> </md-input-container> </ng-template>   </div> </form> </div> <div fxFlex=\"10\"> <button md-fab [disabled]=\"!measurementsForm.valid\" type=\"button\" (click)=\"goNext()\"> <i class=\"material-icons\">navigate_next</i> </button> </div> </div> </md-card> </ng-template> <ng-template #endTab> <md-card fxLayout=\"column\" fxLayoutAlign=\"center ce\"> <h1>{{'END.COMPLETE' | translate}}</h1> <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\"> <div> <button md-raised-button type=\"button\" (click)=\"submitMeasurements()\"> {{'END.SHOP' | translate}} </button> </div> </div> </md-card> </ng-template> <ng-template #nextButton> <div fxFlex=\"10\"> <button md-fab type=\"button\" (click)=\"goNext()\" class=\"next-btn\"> <i class=\"material-icons\">navigate_next</i> </button> </div> </ng-template>","styles":["#dialog { width: 100%; height: 100%; position: relative; } #dialog .sex-content .md-button { line-height: 26px; border-radius: 30px; padding: 0 20px; text-transform: none; } #dialog .next-btn { background-color: #909CB6; color: rgba(0, 0, 0, 0.54); } #dialog .next-btn:hover { background-color: #5E6574; } #dialog .full-height { height: 100%; } #dialog .full-width { width: 100%; } #dialog .no-padding { padding: 0px; } #dialog .transparent { background-color: transparent; } #dialog .mat-tab-list { display: none; } #dialog .mat-tab-header { display: none !important; } #dialog .mat-toolbar-layout { width: 100%; } #dialog md-card { min-width: 72vw; min-height: 63vh; } #dialog md-card h1 { color: #95989A; } #dialog h1 { font-size: 50px; font-weight: 100; } "],"encapsulation":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewEncapsulation"},"member":"None"}}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"MdDialogRef","module":"@angular/material","arguments":[{"__symbolic":"reference","name":"FitDialogComponent"}]},{"__symbolic":"reference","name":"Éµa"},{"__symbolic":"reference","name":"MetaformaService"},{"__symbolic":"reference","name":"FitMediatorComponent"},{"__symbolic":"reference","module":"@angular/material","name":"MdIconRegistry"},{"__symbolic":"reference","module":"@angular/platform-browser","name":"DomSanitizer"},{"__symbolic":"reference","module":"ng2-translate","name":"TranslateService"}]}],"ngOnInit":[{"__symbolic":"method"}],"test":[{"__symbolic":"method"}],"submitMeasurements":[{"__symbolic":"method"}],"notify":[{"__symbolic":"method"}],"setSex":[{"__symbolic":"method"}],"goNext":[{"__symbolic":"method"}],"goBack":[{"__symbolic":"method"}],"closeDialogBox":[{"__symbolic":"method"}],"goTo":[{"__symbolic":"method"}],"setShape":[{"__symbolic":"method"}],"toFormGroup":[{"__symbolic":"method"}],"getInputPlacerholder":[{"__symbolic":"method"}],"changeUnits":[{"__symbolic":"method"}],"setValue":[{"__symbolic":"method"}],"convertInchToCm":[{"__symbolic":"method"}],"convertFeetToCm":[{"__symbolic":"method"}],"convertLbsToKg":[{"__symbolic":"method"}],"getInImperial":[{"__symbolic":"method"}],"convertToLbs":[{"__symbolic":"method"}],"convertToFeet":[{"__symbolic":"method"}],"formatFeetValue":[{"__symbolic":"method"}],"convertToInch":[{"__symbolic":"method"}],"changeLanguage":[{"__symbolic":"method"}],"getOtherLanguage":[{"__symbolic":"method"}]}},"MetaformaService":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable"}}],"members":{"__ctor__":[{"__symbolic":"constructor"}],"submitMeasurements":[{"__symbolic":"method"}]}},"Éµa":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable"}}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/http","name":"Http"}]}],"getBodyShapes":[{"__symbolic":"method"}],"getMeasurements":[{"__symbolic":"method"}],"getBasicInfo":[{"__symbolic":"method"}],"getShapes":[{"__symbolic":"method"}],"addCapture":[{"__symbolic":"method"}],"handleErrorObservable":[{"__symbolic":"method"}]}}},"origins":{"createTranslateLoader":"./index","FitConnectModule":"./index","FitMediatorComponent":"./FitMediator/FitMediator.component","FitDialogComponent":"./FitDialog/FitDialog.component","MetaformaService":"./Metaforma.service","Éµa":"./Data.service"},"importAs":"fitconnectmodule"}